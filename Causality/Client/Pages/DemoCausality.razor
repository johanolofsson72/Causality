@page "/democausality"

<EventComponent NotifyParent="Notify" />

<br />

<MetaComponent NotifyParent="Notify" />

@if (!string.IsNullOrEmpty(notificationMessage))
{
    <div class="notification-container">
        <div class="alert @notificationClass alert-dismissible fade show" role="alert">
            @notificationMessage
            <button type="button" class="btn-close" @onclick="ClearNotification" aria-label="Close"></button>
        </div>
    </div>
}

@code
{
    private string notificationMessage = "";
    private string notificationClass = "alert-info";

    public async void Notify(Dictionary<string, string> parameters)
    {
        await Task.Delay(0);
        notificationMessage = parameters.ContainsKey("text") ? parameters["text"] : "";
        
        if (parameters.ContainsKey("theme"))
        {
            notificationClass = parameters["theme"] switch
            {
                "success" => "alert-success",
                "error" => "alert-danger",
                "warning" => "alert-warning",
                _ => "alert-info"
            };
        }
        
        StateHasChanged();
        
        // Auto-hide after 5 seconds
        _ = Task.Delay(5000).ContinueWith(async _ => 
        {
            await InvokeAsync(() =>
            {
                notificationMessage = "";
                StateHasChanged();
            });
        });
    }
    
    private void ClearNotification()
    {
        notificationMessage = "";
        StateHasChanged();
    }
}