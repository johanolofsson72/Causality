@page "/formstate"

<h3>Form state with auto save!</h3>

<table>
    <tr><td>First:</td><td><input @ref="firstname" class="form-control" type="text" @bind="fsm.Firstname" @bind:event="oninput" @onkeyup="UpdateValue" /></td></tr>
    <tr><td>Last:</td><td><input @ref="lastname" class="form-control" type="text" @bind="fsm.Lastname" @bind:event="oninput" @onkeyup="UpdateValue" /></td></tr>
    <tr><td>Address:</td><td><input @ref="address" class="form-control" type="text" @bind="fsm.Address" @bind:event="oninput" @onkeyup="UpdateValue" /></td></tr>
    <tr><td>Postal:</td><td><input @ref="postal" class="form-control" type="text" @bind="fsm.Postal" @bind:event="oninput" @onkeyup="UpdateValue" /></td></tr>
    <tr><td>City:</td><td><input @ref="city" class="form-control" type="text" @bind="fsm.City" @bind:event="oninput" @onkeyup="UpdateValue" /></td></tr>
    <tr><td>Phone:</td><td><input @ref="phone" class="form-control" type="tel" @bind="fsm.Phone" @bind:event="oninput" @onkeyup="UpdateValue" /></td></tr>
    <tr><td>Email:</td><td><input @ref="email" class="form-control" type="email" @bind="fsm.Email" @bind:event="oninput" @onkeyup="UpdateValue" /></td></tr>
</table>

@code {

    [CascadingParameter] CascadingAppStateProvider StateProvider { get; set; }

    FormStateModel fsm = new();

    ElementReference firstname;
    ElementReference lastname;
    ElementReference address;
    ElementReference postal;
    ElementReference city;
    ElementReference phone;
    ElementReference email;

    protected async override Task OnInitializedAsync()
    {
        var formstate = JsonConvert.DeserializeObject<FormStateModel>(StateProvider.AppState.FormState);
        if (formstate != null)
        {
            fsm.Firstname = formstate.Firstname;
            fsm.Lastname = formstate.Lastname;
            fsm.Address = formstate.Address;
            fsm.Postal = formstate.Postal;
            fsm.City = formstate.City;
            fsm.Phone = formstate.Phone;
            fsm.Email = formstate.Email;
        }
        await Task.Delay(0);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (fsm.Firstname.Length < 1)
                await firstname.FocusAsync();
            else if (fsm.Lastname.Length < 1)
                await lastname.FocusAsync();
            else if (fsm.Address.Length < 1)
                await address.FocusAsync();
            else if (fsm.Postal.Length < 1)
                await postal.FocusAsync();
            else if (fsm.City.Length < 1)
                await city.FocusAsync();
            else if (fsm.Phone.Length < 1)
                await phone.FocusAsync();
            else if (fsm.Email.Length < 1)
                await email.FocusAsync();
        }
    }

    public async Task UpdateValue()
    {
        await Task.Delay(0);
        StateProvider.AppState.FormState = JsonConvert.SerializeObject(fsm);
        StateProvider.SaveChanges();
    }

    public class FormStateModel
    {
        public string Firstname { get; set; } = "";
        public string Lastname { get; set; } = "";
        public string Address { get; set; } = "";
        public string Postal { get; set; } = "";
        public string City { get; set; } = "";
        public string Phone { get; set; } = "";
        public string Email { get; set; } = "";
    }

}
